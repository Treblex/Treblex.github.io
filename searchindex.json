{"categories":[{"title":"crypto","uri":"https://blog.abadboy.cn/categories/crypto/"},{"title":"golang","uri":"https://blog.abadboy.cn/categories/golang/"},{"title":"javascript","uri":"https://blog.abadboy.cn/categories/javascript/"}],"posts":[{"content":"","id":0,"section":"posts","summary":"","tags":null,"title":"游戏开发入门","uri":"https://blog.abadboy.cn/2021/02/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/","year":"2021"},{"content":"1.功能规划  1.1 主要功能，基于不对称加密 加密文本消息 1.2 维护一个联系人列表，记录对方的加密方式和公钥  1.2.1 分享我的公钥 1.2.2 需要一个设备唯一 id(或者初始化 app 随机一个)   1.3 缓存历史密文消息 i（需要一个密码或者生物认证解密 1.4 生成密钥 或者由用户导入 1.5 一些扩展工具 base64 md5 之类的 1.6 加密相关知识  2.设计蓝图 ","id":1,"section":"posts","summary":"1.功能规划 1.1 主要功能，基于不对称加密 加密文本消息 1.2 维护一个联系人列表，记录对方的加密方式和公钥 1.2.1 分享我的公钥 1.2.2 需要一个设备唯一 id(或者初","tags":null,"title":"关于一个加密信息的app Idea","uri":"https://blog.abadboy.cn/2021/01/%E5%85%B3%E4%BA%8E%E4%B8%80%E4%B8%AA%E5%8A%A0%E5%AF%86%E4%BF%A1%E6%81%AF%E7%9A%84app-idea/","year":"2021"},{"content":"First . ADB 基础 ，测试设备 这个在之前疯狂刷机的年纪学的，零零散散的没有具体的文档了，因为用的 android studio 所以直接找到相关目录加入环境变量即可'\n# 常用命令 adb devices #列出已链接的设备 adb connect 192.168.0.xx:5555 #链接局域网的设备  测试手机用的小米 note3，miui 开始慢慢限制权限了，所以刷了个魔趣的系统，开启开发者模式之后，可以在开发者模式里找到 网络 adb 开启\n！跑题，关于刷机的步骤 非必要 Twrp 下载 https://twrp.me/Devices/ 魔趣 ROM https://download.mokeedev.com/\n# 使用命令行刷机 # ！需提前确认相关机型如何解bl锁，国内厂商很多不开启了，小米需要在官网 http://www.miui.com/unlock/index.html 开启 # 1.使用usb链接 adb reboot bootloader # 2.进入fastboot开发模式后 先刷入recover fastboot flash recovery twrp-2.8.x.x-xxx.img # 重启后进入rec模式，小米是按住开机和音量+ fastboot reboot # 进入rec模式后,adb发送系统镜像 adb push /xxxx/xxx.img /sdcard/ # more twrp卡刷，清除分区（某些时候需要重启下再安装），返回首页安装，找到镜像刷入即可  下一步使用 adb connect 192.168.0.xx:5555链接局域网设备。 天下苦（type c 的接口一直掉）已久 😂\nSecond . 新建项目 Third . build.Gradle 配置 看的 uniapp adnroid 本地打包 的文档\n//声明项目是一个app plugins { id 'com.android.application' } //构建配置 android { //项目签名 signingConfigs { jks { storeFile file('xx.jks') storePassword 'xx' keyAlias 'xx' keyPassword 'xxx' } } compileSdkVersion 30 buildToolsVersion \u0026quot;30.0.2\u0026quot; defaultConfig { //包名 applicationId \u0026quot;com.rtg.test\u0026quot; //最小支持版本 ，小于这个版本的无法安装app minSdkVersion 19 //目标版本 ，上架市场指定 现在一般是28 targetSdkVersion 30 //版本号 市场判断升级 versionCode 1 versionName \u0026quot;1.0\u0026quot; //引用依赖过多之后报了一个错误 无法编译 需要开启这个 multiDexEnabled true //指定内核 ndk { abiFilters 'x86','armeabi-v7a' } //默认的 还是没入测试的门 testInstrumentationRunner \u0026quot;androidx.test.runner.AndroidJUnitRunner\u0026quot; //签名app signingConfig signingConfigs.jks } //默认 buildTypes { ... } //使用uniapp时，需复制下面代码 /*代码开始*/ aaptOptions { additionalParameters '--auto-add-overlay' //noCompress 'foo', 'bar' ignoreAssetsPattern \u0026quot;!.svn:!.git:.*:!CVS:!thumbs.db:!picasa.ini:!*.scc:*~\u0026quot; } /*代码结束*/ //指定java版本 compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } } repositories { flatDir( dirs: \u0026quot;libs\u0026quot; ) } dependencies { //引用依赖 就学会一个 filetree 挺好用的 implementation fileTree(dir: \u0026quot;libs\u0026quot;,includes: [\u0026quot;*.aar\u0026quot;,\u0026quot;*.jar\u0026quot;]) }  Fourth . AndroidManifest.xml \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;manifest xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot; package=\u0026quot;com.rtg.test\u0026quot;\u0026gt; \u0026lt;!-- 申请权限 --\u0026gt; \u0026lt;uses-permission android:name=\u0026quot;android.permission.CAMERA\u0026quot; /\u0026gt; \u0026lt;application android:allowBackup=\u0026quot;true\u0026quot; android:icon=\u0026quot;@mipmap/ic_launcher\u0026quot; android:label=\u0026quot;@string/app_name\u0026quot; android:roundIcon=\u0026quot;@mipmap/ic_launcher_round\u0026quot; android:supportsRtl=\u0026quot;true\u0026quot; android:theme=\u0026quot;@style/Theme.Test\u0026quot;\u0026gt; \u0026lt;!-- 默认视图 --\u0026gt; \u0026lt;activity android:name=\u0026quot;.MainActivity\u0026quot; android:label=\u0026quot;@string/app_name\u0026quot; android:theme=\u0026quot;@style/TranslucentTheme\u0026quot; android:screenOrientation=\u0026quot;user\u0026quot; android:windowSoftInputMode=\u0026quot;adjustResize\u0026quot; \u0026gt; \u0026lt;!-- 应该是设置为主窗口 --\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026quot;android.intent.action.MAIN\u0026quot; /\u0026gt; \u0026lt;category android:name=\u0026quot;android.intent.category.LAUNCHER\u0026quot; /\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/activity\u0026gt; \u0026lt;/application\u0026gt; \u0026lt;/manifest\u0026gt;  More . Android 文档 https://developer.android.com/guide/components/fundamentals?hl=zh-cn 官方文档挺清晰的，就是没耐心看完\nUniApp 原生扩展加 alipay 的 demo,没 UI 的，安卓画界面的方式还是没搞懂 支付宝文档：https://opendocs.alipay.com/open/204/105296\nimport io.dcloud.feature.uniapp的包是在 uniapp adnroid 本地打包 下的 sdk 里 uniapp-v8-release.aarpackage com.rtg.mylibrary; import android.annotation.SuppressLint; import android.app.Activity; import android.os.Bundle; import android.os.Handler; import android.os.Message; import android.text.TextUtils; import com.alipay.sdk.app.AuthTask; import com.alipay.sdk.app.EnvUtils; import com.alipay.sdk.app.PayTask; import java.util.HashMap; import java.util.Map; import io.dcloud.feature.uniapp.annotation.UniJSMethod; import io.dcloud.feature.uniapp.bridge.UniJSCallback; import io.dcloud.feature.uniapp.common.UniModule; // UniModule 声明为可以在uni原生模块中调用 public class Pay extends UniModule { @UniJSMethod //声明一个js可以调用的方法 public void sayHello(String tag) { System.out.println(\u0026quot;hello uni module!\u0026quot;); } // private final int SDK_PAY_FLAG = 1; //没用到，基于官方到sdk改了 // 设置沙箱变量，是一个常量，所以如果不写else部分，下一次调用还是沙箱 private void isSandBox(Boolean sandbox){ if(sandbox){ EnvUtils.setEnv(EnvUtils.EnvEnum.SANDBOX); }else { EnvUtils.setEnv(EnvUtils.EnvEnum.ONLINE); } } @UniJSMethod(uiThread = true) public void AliPay(String orderInfo,Boolean sandbox, UniJSCallback callBack){ //是个常量，需要重写 大意了就没有闪 this.isSandBox(sandbox); // mUniSDKInstance.getContext() 获取到uni的当前Activity if(mUniSDKInstance.getContext() instanceof Activity){ final Activity activity = (Activity) mUniSDKInstance.getContext(); Map\u0026lt;String,Object\u0026gt; jsCallbackResult = new HashMap\u0026lt;\u0026gt;(); // 声明一个新的Runnable 用于下一步开启线程 Runnable payRunnable = new Runnable() { @Override public void run() { try{ PayTask task = new PayTask(activity); String result = task.pay(orderInfo,true); // 需要在当前 Activity 启动线程 回调处理结果，否则会造成cash activity.runOnUiThread(new Runnable() { @Override public void run() { jsCallbackResult.put(\u0026quot;result\u0026quot;,result); if(callBack!=null)callBack.invoke(jsCallbackResult); } }); }catch(final Exception err){ activity.runOnUiThread(new Runnable() { @Override public void run() { jsCallbackResult.put(\u0026quot;exception\u0026quot;,err); if(callBack!=null)callBack.invoke(jsCallbackResult); } }); System.out.println(\u0026quot;支付失败\u0026quot;+err); } } }; // 启动线程，线程用完即自动结束 不需要手动关闭 Thread _thread = new Thread(payRunnable); _thread.start(); } } }  ","id":2,"section":"posts","summary":"First . ADB 基础 ，测试设备 这个在之前疯狂刷机的年纪学的，零零散散的没有具体的文档了，因为用的 android studio 所以直接找到相关目录加入环境变量即可' # 常用命令 adb","tags":null,"title":"程序员弯路指南关于-关于android😭-我在网上瞎逼学的日常","uri":"https://blog.abadboy.cn/2020/12/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BC%AF%E8%B7%AF%E6%8C%87%E5%8D%97%E5%85%B3%E4%BA%8E-%E5%85%B3%E4%BA%8Eandroid-%E6%88%91%E5%9C%A8%E7%BD%91%E4%B8%8A%E7%9E%8E%E9%80%BC%E5%AD%A6%E7%9A%84%E6%97%A5%E5%B8%B8/","year":"2020"},{"content":"上一篇文章写了点开发板的记录，基础刚刚看完，下一步需要搞焊接了，没买装备，暂时放下了，\n最近莫名想着搞独立开发了，找了各种方向还是觉得做 apple store 的 app 会比较合适，于是拿着 ios14 上线之后很火的 widget 做了些练习，这里记录一下\n学习目标 想要用于开发 widget，app 的主要内容还是倾向于使用 flutter\n基础语法 这个还没细看，基于 xcode 代码提示和实际问题开始的\n入门文档 官方手把手教学 立即开始做一个简单 app\nswift 官方文档资源\nSwiftUI 程式開發初體驗 medium.com  这是我找到的一个，官方的虽然交互漂亮，但是有点太慢了\nhttps://onevcat.com/ 猫神 似乎是个大咖 出过相关的开发书籍\n遇到的问题 解决记录 打开 xcode 找不到组件属性面板 因为 xcode11 之后支持了 canvas 实时预览组件，这个属性面板跟随了 canvas 的显示和隐藏，\n右上角点击+号有一个选择组件可以直接拖放的面板，也跟随了这个设置\nswift ui 自动撑开父组件 和 flutter 一样，swift ui 常用布局组件类似 html 的display:flex，但是没有实现类型flex：1的属性\n需要使用一个 Spacer 的组件撑开剩余的空间 CocoaPods 使用 1.安装 https://cocoapods.org/\n2.使用pod init在工作目录进行初始化，之后打开Profile文件编辑\n# Uncomment the next line to define a global platform for your project # 指定ios版本 platform :ios, '10.0' # 因为我需要在 app 和 widget 同时使用，所以直接全局安装了 pod 'Alamofire', '~\u0026gt; 5.2' pod 'SwiftyJSON' target 'infoExtension' do # Comment the next line if you don't want to use dynamic frameworks use_frameworks! # 在这里安装需要的库 # Pods for infoExtension end target 'v2widget' do # Comment the next line if you don't want to use dynamic frameworks use_frameworks! # Pods for v2widget target 'v2widgetTests' do inherit! :search_paths # Pods for testing end target 'v2widgetUITests' do # Pods for testing end end  3.编辑完成之后，返回命令行在工作目录执行 pod install 安装 4.安装完成之后需要关闭 xcode,找到工作目录，打开 workspace 文件，这个是 pod 新建的，包含了下载的库 request 网络请求(需要用到一个 Alamofire 的库 上一段已经安装了需要的库 最新版本的 Alamofire 不能直接使用 Alamofire.request 调用，而是声明了一个 AF 的命名空间 使用是类似 AF.request(url)//声明url !在某些场景下表示必须实现类型 let url = URL(string: \u0026quot;https://www.xxxx.com/api/members/show.json?username=suke971219\u0026quot;)! //responseJSON 表示返回json类型 还支持string及其他类型 var user:User; AF.request(url,method: HTTPMethod.get).responseJSON{ response in // response in 相当于 (response)=\u0026gt;{} 但是不知道为什么这里不需要大括号{} switch (response.result){ case .success(let json): print(json )//这里的json应该已经转换了 但是是一个Any类型，下一步类型强转 let dict = json as! Dictionary\u0026lt;String,AnyObject\u0026gt; user = User(json:dict) print(user) case .failure(let err): print(\u0026quot;error \\(err)\u0026quot;) } }  Dictionary 到一个实际的 model（直接使用字典类型似乎不是一个好习惯 我找了很多，推荐的都是HandyJSON SwiftyJSON 以及一些其他的框架，但是我使用 pod 安装的时候遇到了一个 swift 版本的问题，我有必须使用最新版本的强迫症，所以没有继续\n这是一个简单的例子，在上一段中我们传入了一个 Dictionary 类型的字典，可以直接在初始化的阶段给对象赋值\npublic struct User { var username:String? var website:String? var github:String? var avatar_normal:String? var url:String? var created:Int? var location:String? var id:Int? var day:String? var twitter:String? init(json: Dictionary\u0026lt;String, Any\u0026gt;){ self.username = json[\u0026quot;username\u0026quot;] as? String self.website = json[\u0026quot;website\u0026quot;] as? String self.github = json[\u0026quot;github\u0026quot;] as? String self.avatar_normal = json[\u0026quot;avatar_normal\u0026quot;] as? String self.created = json[\u0026quot;created\u0026quot;] as? Int self.location = json[\u0026quot;location\u0026quot;] as? String self.id = json[\u0026quot;id\u0026quot;] as? Int self.twitter = json[\u0026quot;twitter\u0026quot;] as? String self.day = timeStampToCurrennTime(timeStamp: Double(self.created ?? 0)) } }  一个转换时间戳的小工具 掘金-swift 时间戳与时间相互转化\n模块间相互引用 你可以新建一个目录创建一些工具类的文件，并且只要在文件属性的 target 指定相关的模块就可以直接引用了\n","id":3,"section":"posts","summary":"上一篇文章写了点开发板的记录，基础刚刚看完，下一步需要搞焊接了，没买装备，暂时放下了， 最近莫名想着搞独立开发了，找了各种方向还是觉得做 apple store 的","tags":null,"title":"程序员弯路指南-迫于无聊,入门了一下 swiftui 开发","uri":"https://blog.abadboy.cn/2020/10/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BC%AF%E8%B7%AF%E6%8C%87%E5%8D%97-%E8%BF%AB%E4%BA%8E%E6%97%A0%E8%81%8A%E5%85%A5%E9%97%A8%E4%BA%86%E4%B8%80%E4%B8%8Bswiftui%E5%BC%80%E5%8F%91/","year":"2020"},{"content":"         开发环境 macOS Big Sur 11.0 Beta 版(20A5395g)   设备型号 nodemcu 32s    esp32 的开发 最近心血来潮，买了块 esp32 的开发板，使用的 arduino 框架，需要使用到 c++，还没专门学习，主要考 arduino 的 demo 代码片段了解一些基础语法，方向还是了解 esp 开发相关的，暂不准备深度 c++ 相关\n主要实验了 tinygo，micropython, idf(官方套件),esp-arduino （有一个共同的问题就是这些项目都共同依赖了 esptool.py 和 serial.py ,在 macos Big Sur 中因为一个系统依赖的改变导致自动查找端口的方法失败，需要注释掉一段代码，并且指定端口 issues https://github.com/pyserial/pyserial/issues/509\ntinygo 比较喜欢 go 语言，因此首选的考虑这个，但是仅支持了 gpio ipc ℹ2c 接口，没有 wifi 和蓝牙模块，所以暂时放弃了\n环境配置：https://tinygo.org/getting-started/macos/\nvscode 扩展 tinygo.vscode-tinygo\nvscode 中需要设置一下工作区配置，设置 goroot 和 gopath\ntinygo 实现了 flash 方法不需要依赖 esptool，tinygo flash -target=esp32-wroom-32 -port=/dev/ttyUSB0 examples/blinky1 指定 target 的时候 tinygo 会检测是否存在指定的硬件\nmicropython 这个实现相对完善的，并且支持了串口 repl 和 webscket 网络 repl，但是没有找到比较合适的软件，最开始只能在命令行执行 python 命令，开启 wifi 和网络 repl，之后可以使用网络 repl 上传文件\n推荐一个 thonny 的软件，支持指定 python 解释器和自动链接到串口 repl （使用 screen 链接是总是会占用串口，提示 busy，这个软件很合适）并且支持了一个简单的文件系统，可以直接选择开发板中的文件进行编辑\n另外找到一个 1zlab 开发的 web ide http://www.1zlab.com/wiki/micropython-esp32/ (这里也有一些 micropython 开发的教程和硬件基础知识，算是比较容易懂的)，扩展了 web repl 的使用，看起来很方便，但是没有部署成功，项目 2 年多没有更新了，并且前后端的命令有一些不兼容，可能需要修改一下（有时间可能想要 fork 这个项目维护一下\n放弃的原因，一个是开发环境(还算不错的了，但是后边找到个更方便的)，另一个就是找到的资料普遍表示 micropython 性能会差一点(其实不用太介意)\nidf https://docs.espressif.com/projects/esp-idf/en/release-v3.0/get-started/macos-setup.html\n开发环境比较大，demo 的文件夹内容比较困惑，python 和 c 是混合的，似乎使用 python 完成一些构建配置，c 代码是主要内容 主要还是开发环境太大，下载了半天一个多 G、测试 demo 后，遂放弃\narduino https://www.arduino.cc/ arduino ide for mac 使用的 esptool 是一个编译后文件，无法修改替换上述的一个问题，无法链接设备\nhttps://marketplace.visualstudio.com/items?itemName=platformio.platformio-ide platformIO IDE for vscode ,最新使用的是这个，可以指定 arduino 和 idf 环境，有挺多的扩展库支持，vscode toolbar 自动链接，烧录，测试都很方便，难点在与 c++的学习，（代码检测和错误提示的速度有些慢\n","id":4,"section":"posts","summary":"开发环境 macOS Big Sur 11.0 Beta 版(20A5395g) 设备型号 nodemcu 32s esp32 的开发 最近心血来潮，买了块 esp32 的开发板，使用的 arduino 框架，需要使用到 c++，还没专门学习，主","tags":null,"title":"最近学习esp32开发板的一些记录","uri":"https://blog.abadboy.cn/2020/10/%E6%9C%80%E8%BF%91%E5%AD%A6%E4%B9%A0esp32%E5%BC%80%E5%8F%91%E6%9D%BF%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/","year":"2020"},{"content":"https://github.com/Treblex/go-echo-demo/blob/master/server/router/router.go#L63\nfunc upload(c echo.Context) error { file, err := c.FormFile(\u0026quot;file\u0026quot;) if err != nil { return util.JSONErr(c, err, \u0026quot;上传错误\u0026quot;) //未获取到文件流 } pathExt := path.Ext(file.Filename) acceptsImgExt := []interface{}{\u0026quot;jpg\u0026quot;, \u0026quot;png\u0026quot;, \u0026quot;jpeg\u0026quot;, \u0026quot;webp\u0026quot;} //图片类型 acceptsVideoExt := []interface{}{\u0026quot;mov\u0026quot;, \u0026quot;mp4\u0026quot;, \u0026quot;avi\u0026quot;} //视频类型 acceptsOtherFileExt := []interface{}{\u0026quot;pdf\u0026quot;, \u0026quot;zip\u0026quot;, \u0026quot;rar\u0026quot;, \u0026quot;gz\u0026quot;, \u0026quot;txt\u0026quot;} //其他文件类型 folder := \u0026quot;\u0026quot; // 如果符合类型，设定目录 if inArray(acceptsImgExt, strings.Trim(pathExt, \u0026quot;.\u0026quot;)) { folder = \u0026quot;image\u0026quot; } if inArray(acceptsVideoExt, strings.Trim(pathExt, \u0026quot;.\u0026quot;)) { folder = \u0026quot;video\u0026quot; } if inArray(acceptsOtherFileExt, strings.Trim(pathExt, \u0026quot;.\u0026quot;)) { folder = \u0026quot;file\u0026quot; } // 如果不符合任何一种类型 if folder == \u0026quot;\u0026quot; { return util.JSONErr(c, nil, \u0026quot;文件不合法\u0026quot;) } // 打开文件流 src, err := file.Open() if err != nil { return util.JSONErr(c, err, \u0026quot;打开文件失败\u0026quot;) } defer src.Close() //函数结束时自动关闭文件 //创建文件夹 dir, err := getDir(\u0026quot;./static/upload/\u0026quot;+folder+\u0026quot;/\u0026quot;, time.Now().Format(\u0026quot;2006_01_02\u0026quot;)) if err != nil { return util.JSONErr(c, err, \u0026quot;创建文件夹失败\u0026quot;) } // 随机文件名 + 文件后缀 randName := util.RandStringBytes(32) + pathExt // Destination fileName := filepath.Join(dir, randName) // 创建空文件 dst, err := os.Create(fileName) if err != nil { return util.JSONErr(c, err, \u0026quot;创建文件失败\u0026quot;) } defer dst.Close() // Copy文件流到新建到文件 if _, err = io.Copy(dst, src); err != nil { return util.JSONErr(c, err, \u0026quot;拷贝文件至目标失败\u0026quot;) } // 拼接文件地址，不带协议头，方便处理http 到https升级 ， 其实也没找到协议头在哪儿，req对象里没有返回到空字符串 return util.JSON(c, fmt.Sprintf(\u0026quot;//%s/%s\u0026quot;, c.Request().Host, fileName), \u0026quot;上传成功\u0026quot;, 200) } // 创建文件夹 func getDir(path string, foderName string) (dir string, err error) { folder := filepath.Join(path, foderName) if _, err = os.Stat(folder); os.IsNotExist(err) { err = os.MkdirAll(folder, os.ModePerm) if err != nil { return } } dir = folder return } // 在数组中 func inArray(arr []interface{}, item interface{}) (inArr bool) { index := -1 for i, x := range arr { if item == x { index = i } } return index \u0026gt; -1 }  ","id":5,"section":"posts","summary":"https://github.com/Treblex/go-echo-demo/blob/master/server/router/router.go#L63 func upload(c echo.Context) error { file, err := c.FormFile(\u0026quot;file\u0026quot;) if err != nil { return util.JSONErr(c, err, \u0026quot;上传错误\u0026quot;) //未获取到文件流 } pathExt := path.Ext(file.Filename) acceptsImgExt := []interface{}{\u0026quot;jpg\u0026quot;, \u0026quot;png\u0026quot;, \u0026quot;jpeg\u0026quot;, \u0026quot;webp\u0026quot;} //图片类型 acceptsVideoExt := []interface{}{\u0026quot;mov\u0026quot;, \u0026quot;mp4\u0026quot;, \u0026quot;avi\u0026quot;} //视频类","tags":null,"title":"Go Web Server上传文件实践","uri":"https://blog.abadboy.cn/2020/04/server%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%AE%9E%E8%B7%B5/","year":"2020"},{"content":"flutter 侧滑删除组件 文件地址 click here\n这个组件现在还处于刚刚好能用的状态，问题还蛮多，就是在点击和 touch 事件的时候记录位置，处理偏移\n布局使用的一个Stack定位组件 以及在行首定义了一个 eventbus，可以在页面调用的时候通知全局点击重置状态\n需要一个 event_bus 插件支持\nimport 'package:event_bus/event_bus.dart';  ","id":6,"section":"posts","summary":"flutter 侧滑删除组件 文件地址 click here 这个组件现在还处于刚刚好能用的状态，问题还蛮多，就是在点击和 touch 事件的时候记录位置，处理偏移 布局使用的一个Stack","tags":null,"title":"Flutter开发日记-侧滑删除组件","uri":"https://blog.abadboy.cn/2020/04/flutter%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0-%E4%BE%A7%E6%BB%91%E5%88%A0%E9%99%A4%E7%BB%84%E4%BB%B6/","year":"2020"},{"content":"自定义 ImageProvider 实现 文件 github 地址 ：click here\n注释比较清楚，不多写了,这个主题很好看，但是代码高亮一直没啥反应\n主要的方法都是和原生组件已有的，主要重写了 _loadAsync 方法（图片加载）以及 getter operator 的实现（影响底层组件判断这张图片是否使用缓存）\n","id":7,"section":"posts","summary":"自定义 ImageProvider 实现 文件 github 地址 ：click here 注释比较清楚，不多写了,这个主题很好看，但是代码高亮一直没啥反应 主要的方法都是和原生组件已有的，主要重写","tags":null,"title":"Flutter开发日记-Image网络图片加载错误处理","uri":"https://blog.abadboy.cn/2020/04/flutter%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0-image%E7%BD%91%E7%BB%9C%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/","year":"2020"},{"content":"在 gorm 的 stuct 中实现自定义类型， 完成，  req.body=\u0026gt;(MarshaJson json)=\u0026gt;stuct=\u0026gt;(Value grom.Model)=\u0026gt;数据库\n  数据库=\u0026gt;(Scan grom.Model)=\u0026gt;struct=\u0026gt;(UnmarshaJson json)=\u0026gt;json\n // Array json传数组类型 \u0026gt;\u0026gt;\u0026gt;修复： type Array []string //gorm中声明数据模型的时候需要 Images util.Array `gorm:\u0026quot;type:MEDIUMTEXT\u0026quot; json:\u0026quot;images\u0026quot; ` // UnmarshalJSON req.body []byte=\u0026gt;对象，记得调用json.Unmarshal要新建原始类型进行绑定，不如会死循环 func (a *Array) UnmarshalJSON(b []byte) error { // b = bytes.Trim(b, \u0026quot;\\\u0026quot;\u0026quot;) // fmt.Printf(\u0026quot;%v\u0026quot;, string(b)) //这里一定要新建对象 //json.Unmarshal调用的是 stuct.UnmarshalJSON //所以这里如果直接绑定 \u0026amp;a 会出现死循环 arr := []string{} if err := json.Unmarshal(b, \u0026amp;arr); err != nil { return err //如果解码失败 } *a = Array(arr) //解码成功赋值 // fmt.Printf(\u0026quot;Array UnmarshalJSON %v \\n\u0026quot;, arr) return nil } // Value 存库,对象到转储数据 标准字符 int类型 func (a Array) Value() (driver.Value, error) { // fmt.Printf(\u0026quot;value %v \\n\u0026quot;, a) if len(a) == 0 { return nil, nil } //fmt.Sprint(a) []string=\u0026gt;[a,b,c] 强制转换为字符类型，类似与js中的 obj =\u0026gt; [object,object] //strings.Trim [a b c]=\u0026gt;a b c //strings.ReplaceAll a b c =\u0026gt; a,b,c arr := strings.ReplaceAll(strings.Trim(fmt.Sprint(a), \u0026quot;[]\u0026quot;), \u0026quot; \u0026quot;, \u0026quot;,\u0026quot;) return arr, nil } // Scan 绑定，数据库到对象,这里到数据取到到都是[]uint8字节，转化为对象 func (a *Array) Scan(v interface{}) error { value, ok := v.([]uint8) //自定义的类型 从数据库取出，scan的时候 varchar(255)和double 获取到的都是 []uint8 字节，可能哪里还有问题，之前看的一个自定义时间格式化的可以获取到time.Time类型 if ok { // 转化字节到字符串 分割字符串 arr := strings.Split(string(value), \u0026quot;,\u0026quot;) *a = Array(arr)//重新赋值Arr return nil } return fmt.Errorf(\u0026quot;%v 类型错误 scan失败\u0026quot;, reflect.TypeOf(v)) } // MarshalJSON 对象到json转换 接口展示 func (a *Array) MarshalJSON() ([]byte, error) { //这里在scan后边执行 直接解码，注意新建通用类型 b, err := json.Marshal([]string(*a)) // fmt.Printf(\u0026quot;MarshalJSON %v \\n\u0026quot;, string(b)) if err != nil { return nil, err } // 空数组默认值，空数组返回null在前端还听难受到其实 if string(b) == \u0026quot;null\u0026quot; { b = []byte(`[]`) } return b, nil }  实现效果 请求  post(\u0026quot;\u0026quot;,{data:{arr:[\u0026quot;asd\u0026quot;,\u0026quot;asd\u0026quot;]}})  存库  \u0026quot;asd,asd\u0026quot;  Response  arr:[\u0026quot;asd\u0026quot;,\u0026quot;asd\u0026quot;]  ","id":8,"section":"posts","summary":"在 gorm 的 stuct 中实现自定义类型， 完成， req.body=\u0026gt;(MarshaJson json)=\u0026gt;stuct=\u0026gt;(Value grom.Model)=\u0026gt;数据库 数据库=\u0026gt;(Scan grom.Model)=\u0026gt;struct=\u0026gt;(UnmarshaJson json)=\u0026gt;json // Array json传数组类型 \u0026gt;\u0026gt","tags":null,"title":"Go语言 gorm 自定义json类型","uri":"https://blog.abadboy.cn/2020/03/%E8%87%AA%E5%AE%9A%E4%B9%89json%E7%B1%BB%E5%9E%8B/","year":"2020"},{"content":"环境配置   git clone https://github.com/flutter/flutter.git everyYouLike/flutter 设置环境变量指向 flutter/bin 安装 vscode vscode flutter 插件 ctrl+p 命令模式 新建 flutter project   更多内容 flutter.dev\n推荐教程 click here 开始 1.入口文件 import 'package:flutter/material.dart'; //不同于javascript，dart需要实现一个main函数，在执行文件到时候运行 void main() { runApp(MyApp()); //MyApp 实现一个组件类 }  2.MyApp 实现 class MyApp extends StatelessWidget { MyApp({Key key}) : super(key: key); @override //class 继承之后 重写父类的方法 Widget build(BuildContext context) { return new MaterialApp( //包含material组件 title: \u0026quot;APP\u0026quot;, home: Home(),//自定义实现到页面内容 theme: ThemeData(primaryColor: CustomTheme.primaryColor),//主题 ); } }  3.实现一个 Widget 组件 Widget Home()=\u0026gt;Center(child:Text(\u0026quot;hello world!\u0026quot;));  4.路由跳转 Navigator.push(context, new MaterialPageRoute( builder: (BuildContext context) =\u0026gt; newPageWidget()));  其他 状态栏高度 // 获取状态栏高度 double statusBarHeight(BuildContext c) =\u0026gt; MediaQuery.of(c).padding.top; // 底部安全区域 double bottomBarHeight(BuildContext c) =\u0026gt; MediaQuery.of(c).padding.bottom;  ","id":9,"section":"posts","summary":"环境配置 git clone https://github.com/flutter/flutter.git everyYouLike/flutter 设置环境变量指向 flutter/bin 安装 vscode vscode flutter 插件 ctrl+p 命令模式 新建 flutter project 更多内容 flutter.dev 推荐教程 click here 开始 1.入口文件 import 'package:flutter/material.dart'; //不同于javascript，","tags":null,"title":"Flutter实践","uri":"https://blog.abadboy.cn/2020/03/flutter%E5%AE%9E%E8%B7%B5/","year":"2020"},{"content":"Go-echo-demo https://github.com/Treblex/go-echo-demo\ngo 语言入门 推荐这个 https://tour.golang.org/welcome/2 还没看完 嘿嘿 Go 语言在线练习场，讲解很细\nweb 框架 简单看了一些基础我就来搞这个了，这个项目也是一个 web 实践\n echo 官方文档 注意首页有几个很有用的简单实例，但是你按照文档目录是无法返回这一页的 😂 当时找了好久找不到 这个项目就是 据说超快\n  gin 官方文档 江湖人称：用过都说好，据说开发是可以自动重启 不用手动运行项目 想试试，但是我懒 和上边那个一样快，又一个扩展项目 好像叫 green 可以自动生成文档，不过很久没更新了，有兴趣了解一下这个怎么实现的\n  iris 官方文档 大型项目支持\n 数据库支持 gorm 中文文档 我看的这个 因为搜索引擎先找到了这个 后来才发现其实不是官方的 这里\u0026raquo; gorm 官方文档\n\u0026quot;github.com/jinzhu/gorm\u0026quot; //数据库操作框架 支持模型和链式操作 不用写sql了 _ \u0026quot;github.com/go-sql-driver/mysql\u0026quot; //go语言sql驱动 db, err := gorm.Open(\u0026quot;mysql\u0026quot;, config.DataBase) if err != nil { panic(err) } db.LogMode(true) defer db.Close() //defer表示函数结束是调用 ， 但是我不想在每个函数都重新打开链接，所以我创建了一个 util包 并暴露了 DB 供全局使用，我在 main.go 的函数结尾出调用了 defer db.Close()，但我并不知道他是否关闭了链接，可以知道的是链接确实只创建了一次，并一直保持  📃 关于这个项目 . ├── Dockerfile //docker构建 我还在摸索 不过确实运行成功了 ├── README.md ├── build.linux.sh //linux构建文件，我在一段时间后才意识到 编译到不同平台到二进制文件也会有不同，不该是0和1吗 😂 ├── build.sh //mac构建 ├── build.win.sh //win .exe文件 ├── config │ └── config.go //配置文件 ├── dist //编译后到文件 │ └── main-linux ├── go.mod //go模块 ├── go.sum //git clone 之后可能需要删除这个文件重新按照mod ├── h5 // 这是一个简单到请求接口到页面，在尝试了一段时间layui写admin页面之后，觉得直接写接口好了，\u0026gt;\u0026gt;\u0026gt; mvc 主要是卡在 模版分离之后 header 和 footer 之类到layout文件 如何请求数据，因为他不对应一个路由，当前找到到方案是模版函数 但是没有运行成功 可能我绑定模版render到方法也有问题, 也尝试了ifarme 不太喜欢，还是后边试一下antd或者自己搞一下vue或者react的后台页面 │ ├── api.js │ ├── index.html │ ├── main.css │ └── main.js ├── main.go //入口文件 ├── modal //模型文件， 数据库查询的方法 │ └── user.go ├── router //路由文件 │ ├── admin //内包含一个类似router.go的入口文件，和其他路由文件 │ └── router.go //暴露一个 Init 方法接收 echo对象, 用于声明当前路面的子文件夹路由对象 或者 路由 \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; 例子 \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; // 项目首页 admin.Init(e, baseURL) // 入口 e.GET(baseURL, func(c echo.Context) error { return c.String(http.StatusOK, \u0026quot;hello world！\u0026quot;) }) \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; ├── static //资源文件 ├── template //模板文件 弃用mvc之后 只保留了error │ └── error.html └── util //工具包 ├── db.go // 暴露一个DB对象 用户操作数据库,启动后仅链接一次 ├── return.go //返回的json对象格式 和错误码声明 ├── template.go //声明模版 ├── time.go //时间格式化 以及 链接数据库是自动格式化的一个 结构体 └── util.go //暂无内容--  🦊 杂项 遇到的一些小问题 时间戳格式化 var timeLayout string = \u0026quot;2006年01月02日 15:04:05\u0026quot; t := time.Now() t.Format(timeLayout) //这里 2006 01 02 15 04 05 必须是固定的才能解析到正确的时间 //我在 util/time.go 内实现了一个简单的方法以使用 y-m-d h:i:s 来格式化时间 主要还是因为懒得记 // Format 也提供了很多的默认layout，默认layou英文支持做的好一些，中文的显示自定义的layout满足需求  数据库存取时间类型 gorm 时间类型自定义解析格式 // LocalTime 继承time.Time类型 type LocalTime struct { time.Time } // 自定义的 layout var timeLayout string = \u0026quot;2006年01月02日 15:04:05\u0026quot; // MarshalJSON json格式化时间的方法 // 在网上搜到的方式是格式化为时间戳的 不符合我的需求，这个方法是从 time源代码里找到的,直接修改默认 layout为自定义即可 func (t LocalTime) MarshalJSON() ([]byte, error) { if y := t.Year(); y \u0026lt; 0 || y \u0026gt;= 10000 { // RFC 3339 is clear that years are 4 digits exactly. // See golang.org/issue/4556#c15 for more discussion. return nil, errors.New(\u0026quot;Time.MarshalJSON: year outside of range [0,9999]\u0026quot;) } b := make([]byte, 0, len(timeLayout)+2) b = append(b, '\u0026quot;') b = t.AppendFormat(b, timeLayout) b = append(b, '\u0026quot;') return b, nil } //下边两个方法是gorm需要,不需要修改，如果没有使用 gorm则不需要 // Value Value func (t LocalTime) Value() (driver.Value, error) { var zeroTime time.Time if t.Time.UnixNano() == zeroTime.UnixNano() { return nil, nil } return t.Time, nil } // Scan Scan func (t *LocalTime) Scan(v interface{}) error { value, ok := v.(time.Time) if ok { *t = LocalTime{Time: value} return nil } return fmt.Errorf(\u0026quot;can not convert %v to timestamp\u0026quot;, v) }  存取时间的时候相差 8 小时 //DataBase 数据库配置 username:password@host/database_name?param DataBase string = \u0026quot;root:2568597007suke@(localhost:3306)/test?charset=utf8mb4\u0026amp;parseTime=true\u0026amp;loc=Asia%2fShanghai\u0026quot; //charset=utf8mb4 数据库编码 //parseTime=true 自动解析时间 time.Time 类型解析显示不正确 z100:h1223 之类的一个字符串 //loc=Asia%2fShanghai 默认亚洲时间，数据库存储 detatime 默认为utc时区 也就是会比国内早8个小时  查询数据时 隐藏某些隐私字段 gorm:\u0026quot;-\u0026quot; 在保存数据的时候会忽略 查询是同样显示\n//暂时的解决方案是声明两个模型，在查询时仅显示必要字段 //由于gorm使用结构名 + s 例如 users articles 默认为约定表名，所以声明另外的模型是需要在查询数据只指定表名 // gorm.Table(\u0026quot;users\u0026quot;)  ！gorm 更新 或者 添加删除字段后 查询影响的数据行数一直为 0，因此无法知道是否更新成功 或者 保存数据成功 在操作之后重新赋值 db 以获取新的位置 而不是直接使用 db.RowsAffected\nrow := db.Model(\u0026amp;User{ID: id}).Updates(data) row.RowsAffected  go get 安装完包之后不能使用命令后直接执行 path 设置错误\n# //go mod需要开启 export GO111MODULE=on # //指定代理 export GOPROXY=https://goproxy.cn; # goroot go环境所在目录 系统包 export GOROOT=/usr/local/go # 安装的package所在目录 自己定义，修改目录之后需要重新安装package export GOPATH=~/gowork # 将GOPATH/bin 加入全局path之后 自定义安装的package就可以全局运行了 fresh govender export PATH=$GOPATH/bin:$GOPATH:$PATH  web 开发时自动重启项目 https://github.com/gravityblast/fresh 看起来像是检查 ctrl s 的时候重新编译文件并执行，文件没有修改的时候也会触发重启\n⚠️ 暂未解决的问题 环境设置 export GO111MODULE=on GOPROXY=https://goproxy.cn; export GOROOT=/usr/local/go export GOPATH=~/gowork export PATH=$GOPATH/bin:$GOPATH:$PATH  ","id":10,"section":"posts","summary":"Go-echo-demo https://github.com/Treblex/go-echo-demo go 语言入门 推荐这个 https://tour.golang.org/welcome/2 还没看完 嘿嘿 Go 语言在线练习场，讲解很细 web 框架 简单看了一些基础我就来搞这个了，这个项目也是一个 web 实践 echo 官方文档 注意首页","tags":null,"title":"GO学习项目","uri":"https://blog.abadboy.cn/2020/01/go%E5%AD%A6%E4%B9%A0%E9%A1%B9%E7%9B%AE/","year":"2020"},{"content":"简介 最近遇到一个挺奇怪的问题，在微信使用公众号登陆，走完登陆流程，拿到 token，返回上一页继续请求接口，仍然木有权限，需要重新登陆 也有表现为直接注册失败\n问题 问题是后端解决的，因为数据库格式的问题，存带有 emoji 的微信用户名时，数据库报了错，修改字段格式或者数据库编码解决\n","id":11,"section":"posts","summary":"简介 最近遇到一个挺奇怪的问题，在微信使用公众号登陆，走完登陆流程，拿到 token，返回上一页继续请求接口，仍然木有权限，需要重新登陆 也有表现","tags":null,"title":"在微信登陆遇到重复循环登陆的问题","uri":"https://blog.abadboy.cn/2020/01/%E5%9C%A8%E5%BE%AE%E4%BF%A1%E7%99%BB%E9%99%86%E9%81%87%E5%88%B0%E9%87%8D%E5%A4%8D%E5%BE%AA%E7%8E%AF%E7%99%BB%E9%99%86%E7%9A%84%E9%97%AE%E9%A2%98/","year":"2020"},{"content":"使用 import push from './push let checkPush = new push()  代码 这里class用处不大，只是觉得看起来很舒服，拆分模块也方便后续扩展\nexport default class push{ // 初始化 constructor(){ this.init() } init(){ // 开启推送 uni.subscribePush({ provider: \u0026quot;unipush\u0026quot;, success: function(res) { console.log(\u0026quot;success:\u0026quot; + JSON.stringify(res)); } }); this.onPush() } onPush(){ // 分客户端不同方案监听 let osname = plus.os.name console.log(osname,'unipush') if (osname == 'Android') { uni.onPush({ provider: \u0026quot;unipush\u0026quot;, success: function() { console.log(\u0026quot;监听透传成功\u0026quot;); }, callback: function(data) { console.log(\u0026quot;接收到透传数据：\u0026quot; + JSON.stringify(data)); plus.push.createMessage(data.data, {}); } }); } // 监听在线消息事件 if (osname == 'iOS') { plus.push.addEventListener('receive', function(msg) { console.log(msg) plus.push.createMessage(msg.content, \u0026quot;LocalMSG\u0026quot;, { cover: false }); setTimeout(() =\u0026gt; { // plus.push.clear(); }, 3000) }, false); } this.onMessage() } // 点击消息处理 onMessage(){ plus.push.addEventListener( \u0026quot;click\u0026quot;, function(data) { console.log(data); }, false ); } }  ","id":12,"section":"posts","summary":"使用 import push from './push let checkPush = new push() 代码 这里class用处不大，只是觉得看起来很舒服，拆分模块也方便后续扩展 export default class push{ // 初始化 constructor(){ this.init() } init(){ // 开启推送 uni.subscribePush({ provider: \u0026quot;unipush\u0026quot;, success: function(res) {","tags":null,"title":"UniApp Push检测 👂","uri":"https://blog.abadboy.cn/2019/12/push%E6%A3%80%E6%B5%8B/","year":"2019"},{"content":"使用 //入口文件 // 检查更新 let updateCheck = //new update(this.api.update,true,'1.0.0') // 模板中 import update from '@/util/update.js' export default { data() { return { updateCheck://new update(this.api.update), } }, ... updateCheck.status //更新状态 updateCheck.version //当前资源包版本 updateCheck.doUpdate() //更新方法  代码 接口和字段都需要对应修改\nexport default class update { // #ifdef APP-PLUS // 查询更新接口 api = null; // 当前版本号 version = \u0026quot;1.0.0\u0026quot;; // 更新包状态 status = \u0026quot;\u0026quot;; updateInfo = {}; //远程返回的更新信息 autoInstall = false; // 初始化 constructor(api, autoInstall = false, choooseVersion = \u0026quot;1.0.40\u0026quot;) { this.api = api; this.autoInstall = autoInstall; this.choooseVersion = choooseVersion; this.init(); } async init() { this.status = await this.checkVersion(); if (this.autoInstall) { this.doUpdate(true); } } // 获取版本号 getVersion() { return new Promise((resolve, reject) =\u0026gt; { plus.runtime.getProperty(plus.runtime.appid, (widgetInfo) =\u0026gt; { if (widgetInfo) { if (widgetInfo.version == this.choooseVersion) { uni.setStorageSync(\u0026quot;chooseVersion\u0026quot;, true); } resolve(widgetInfo.version); } reject(widgetInfo); }); }); } // 查看云端接口 async checkVersion() { let version = await this.getVersion(); this.version = version; return new Promise((resolve, reject) =\u0026gt; { this.api().then((res) =\u0026gt; { if (res) { this.updateInfo = res; console.log(res); let { version: versionOl, update_size } = res; if (versionOl == version) { resolve(\u0026quot;\u0026quot;); } let versionArr = version.split(\u0026quot;.\u0026quot;).map((x) =\u0026gt; Number(x)); let versionOlArr = versionOl.split(\u0026quot;.\u0026quot;).map((x) =\u0026gt; Number(x)); console.log(versionOlArr, versionArr); if (versionArr \u0026amp;\u0026amp; versionOlArr) { if (versionOlArr[0] \u0026gt; versionArr[0] \u0026amp;\u0026amp; update_size == 2) { resolve(\u0026quot;版本更新\u0026quot;); } if (versionOlArr[0] == versionArr[0]) { if (versionOlArr[1] \u0026gt; versionArr[1]) { resolve(\u0026quot;修复更新\u0026quot;); } if (versionOlArr[0] == versionArr[0]) { if (versionOlArr[2] \u0026gt; versionArr[2]) { resolve(\u0026quot;修复更新\u0026quot;); } } } } reject(\u0026quot;获取版本号失败\u0026quot;); } }); }); } // 整包更新 doFullUpdate() { let url = this.updateInfo.download_url; plus.runtime.openURL(url); } // 热更新 doUpdate(autoInstall) { let that = this; if (this.status == \u0026quot;版本更新\u0026quot;) { this.doFullUpdate(); } if (this.status == \u0026quot;修复更新\u0026quot;) { if (autoInstall) { uni.showModal({ title: \u0026quot;更新提示\u0026quot;, content: this.updateInfo.version_desc + \u0026quot;\\n更新版本号：\u0026quot; + this.updateInfo.version, success(res) { if (res.confirm) { that.install(); } }, }); } else { this.install(); } } } //下载热更新包 重启更新 install() { uni.showLoading({ title: \u0026quot;下载更新中\u0026quot;, icon: \u0026quot;none\u0026quot;, mask: true, }); uni.downloadFile({ url: this.updateInfo.update_file, success: (downloadResult) =\u0026gt; { uni.hideLoading(); console.log(downloadResult); uni.showLoading({ title: \u0026quot;正在安装...\u0026quot;, icon: \u0026quot;none\u0026quot;, mask: true, }); if (downloadResult.statusCode === 200) { plus.runtime.install( downloadResult.tempFilePath, {}, function () { uni.hideLoading(); console.log(\u0026quot;install success...\u0026quot;); uni.showModal({ title: \u0026quot;提示\u0026quot;, content: \u0026quot;更新已安装，是否立即重启？\u0026quot;, success(res) { if (res.confirm) { plus.runtime.restart(); } }, }); }, function (e) { uni.hideLoading(); console.error(\u0026quot;install fail...\u0026quot;, e); } ); } }, }); } // #endif }  ","id":13,"section":"posts","summary":"使用 //入口文件 // 检查更新 let updateCheck = //new update(this.api.update,true,'1.0.0') // 模板中 import update from '@/util/update.js' export default { data() { return { updateCheck://new update(this.api.update), } }, ... updateCheck.status //更新状态 updateCheck.version //当前资源包版本 updateCheck.doUpdate() //更新方法 代码 接口和字段都","tags":null,"title":"🚀 UniApp热更新检测🔥🔥🔥","uri":"https://blog.abadboy.cn/2019/12/uniapp%E7%83%AD%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B/","year":"2019"},{"content":" 自己在项目中总结的一些工具，总会有不足，欢迎指正\n request 已发布 Dcloud 插件 request easy use 通用网络请求 Dcloud 插件 网络请求整理，常用的一些请求方法，接口整合\n待修复：console.log() 打印请求配置和返回信息的时候使用了 emoji 和%c style 样式，导致 android 5.1 及以下的部分机型白屏，删除掉就行了 做网页项目看着还挺舒服的 没忍心删 以后修复吧\npush 检测 /2019-12-03/Push 检测.html\n热更新检测 /2019-12-03/UniApp 热更新检测.html\n通用自定义弹窗 常见对 popup 组件 对话框 loading 等（js 调用 https://ext.dcloud.net.cn/plugin?id=507 自定义的对话框 loading 提示，可以方便的扩展其他通用弹层\n","id":14,"section":"posts","summary":"自己在项目中总结的一些工具，总会有不足，欢迎指正 request 已发布 Dcloud 插件 request easy use 通用网络请求 Dcloud 插件 网络请求整理，常用的一些请求方法，接口整合 待修复：co","tags":null,"title":"uniapp快速开发常用工具「1」🔧 📦","uri":"https://blog.abadboy.cn/2019/11/uniapp%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B71/","year":"2019"},{"content":"安装  npm init\n  npm install express \u0026ndash;save\n 快速生成项目  npm install -g express-generator\n  express newApp\n 基础目录 bin/www www 配置文件，某些插件会把 log 文件写在这里\npublic 静态资源文件，需要在入口文件挂载才可以访问\n//static是一个虚拟目录 可以直接用 root目录 app.use('/static',express.static(path.join(__dirname, 'public')));  routes 路由文件\nviews 模板文件，可自定义程度很高 还没有详细了解过，暂时倾向于前后端分离，只写接口在这里\napp.js 入口文件，大部分的配置都可以在这里完成 使用插件 cookie jsonparse 这些都需要引用插件实现，模板项目中已经生成了常用的插件 自定义模板 定义路由\nCurl 接第三方接口  这里使用大淘客的 api 做的尝试，没有具体项目逻辑想不到应该做什么，另外数据库也还没尝试\n demo https://github.com/Treblex/dataoke-api/blob/master/server/util/CommodityFactory.js\n 新建一个文件夹放自己的工具类就可以，对文件夹结构没有强制对要求,对应的调用方法在 router/api.js\n Request 直接调用 request 模块就可以，使用方法也非常的简单，符合前端的习惯\nconst request = require(\u0026quot;request\u0026quot;); request({ data }, (callback = (err, res, body) =\u0026gt; {}));  验签 在大淘客的 demo 中，引用了 corypt md5 进行加密，这里需要注意不要在引用文件后就立即createHash(\u0026lsquo;md5\u0026rsquo;)，因为每个实例只能进行一次加密，在需要的地方createHash(\u0026lsquo;md5\u0026rsquo;)就可以了\ncrypto.createHash('md5')  调用 https://github.com/Treblex/dataoke-api/blob/master/server/routes/api.js\nvar express = require(\u0026quot;express\u0026quot;); var router = express.Router(); var factory = require(\u0026quot;../util/CommodityFactory\u0026quot;); // 商品工厂对象 let CommodityFactory = new factory({ appSecret: \u0026quot;17eda35413998548b3fdebd31e6d2c51\u0026quot;, appKey: \u0026quot;5dc6fcef48989\u0026quot;, }); // 临时写的 const errCode = (title) =\u0026gt; { return { time: new Date() * 1, code: -1, msg: title, data: {}, }; }; // 品牌 router.get(\u0026quot;/get-brand-list\u0026quot;, async function (req, res, next) { let { pageId, pageSize = 10 } = req.query; // req.query 请求的参数, // 如果需要支持类似thinkphp的静态url url地址可以写成 '/detail/:id' // 取值使用 req.params['id'],如果有正则，正则的部分为 req.params[index] if (!pageId) { res.send(errCode(\u0026quot;pageId不可空\u0026quot;)); } let body = await CommodityFactory.getBarndList({ pageId, pageSize, }); // 返回页面显示的内容，在此之前可以设置返回的header 等一些常用内容 res.send(body); // res.render('index', { title: 'Express' ,中文:\u0026quot;打火机卡上打哈电话接啊活动空间啊\u0026quot;}); // 渲染到模板的写法，第一个参数模板名字，第二个为渲染到模板的变量 });  中间件开发 官网文档\u0026raquo;\n我的理解是中间件在 php 中类似于一个 base 控制器，\nclass loginBase{ // 检查登录，跳转页面 if(isLogin){ return true } // 301 login.html } class home extends loginBase{ return home }  像文档中介绍的，其实我们定义的路由也是中间件 我能想到的常用的业务场景就是像上边的 登录检测，用户权限这些\napp.use('/api',(res,req,next)=\u0026gt;{ console.log('==err==||AppBase 登录检测或一些其他的内容'); let islogin = false if(!islogin){ req.send('err 未登录什么的'),//如果不执行下一步业务逻辑，我们就必须结束请求，而不能直接return，否则页面会一直处于加载中，直到请求超时 return; } next();//执行下一步 api的路由文件 }) app.use('/api', apiRouter);//自定义路由 业务逻辑  End 还没有部署，客户端没写，接口都对了，下面是 github 仓库 https://github.com/Treblex/dataoke-api\n其实遇到一个问题没有解决，request 大淘客接口的时候又一个 version 参数，这个参数有的接口是 1.0.0 有的是 1.0.1，而且有过期验证，过期的版本无法使用，对于怎么更新接口版本和过期通知没有太好解决方法，现在 version 是在 factory 的每个请求里边写的默认参数\n","id":15,"section":"posts","summary":"安装 npm init npm install express \u0026ndash;save 快速生成项目 npm install -g express-generator express newApp 基础目录 bin/www www 配置文件，某些插件会把 log 文件写在这里 public 静态资源文件，需要在入口文件挂载才可以访问 //st","tags":["express","javascript"],"title":"express试水（1）「大淘客api」😎","uri":"https://blog.abadboy.cn/2019/11/express%E8%AF%95%E6%B0%B41/","year":"2019"},{"content":"场景  拆分一个长列表[1,2,3,\u0026hellip;n]至 [[1,2,3],[1,2,3],[1,2,3]\u0026hellip;]配合套嵌循环，可以简单实现很多有趣的布局\n 效果  使用flex实现Grid布局,(这里flex好像作用不大哈哈 float也行)\n 思路    序号 内容     1 拆分列表之后，之际写了两个循环，例:[[1,2,3],[1,2,3],[1,2,3]\u0026hellip;]   2 第一级的item为[1,2,3]，也就是一行的内容   3 第二级就是单个icon的内容     到这里html 结构就完成,html结构比较分明,利用css nth-child也可以实现一些比较有趣的效果，例如：nth-child(odd)和 nth-child(even)搭配实现棋盘样式，或者上图这种九宫格样式的内边框\n 代码 /** * // 分割一个长数组至 n 个 len 长度的小数组 * @param {Array} arr 需要转换的数组 * @param {Number} len 切割的长度 */ const split_array = (arr, len) =\u0026gt; { var a_len = arr.length; var result = []; for (var i = 0; i \u0026lt; a_len; i += len) { result.push(arr.slice(i, i + len)); } return result; }  ","id":16,"section":"posts","summary":"场景 拆分一个长列表[1,2,3,\u0026hellip;n]至 [[1,2,3],[1,2,3],[1,2,3]\u0026hellip;]配合套嵌循环，可以简","tags":null,"title":"分割一个长数组至 n 个 len 长度的小数组","uri":"https://blog.abadboy.cn/2019/08/%E5%88%86%E5%89%B2%E4%B8%80%E4%B8%AA%E9%95%BF%E6%95%B0%E7%BB%84%E8%87%B3-n-%E4%B8%AA-len-%E9%95%BF%E5%BA%A6%E7%9A%84%E5%B0%8F%E6%95%B0%E7%BB%84/","year":"2019"},{"content":"场景  Api 直接返回数据库表的 curd 小伙伴\n 思路    序号 简介     1 new 一个时间对象 返回 年月日 时分秒（按需补 0   2 传入一个类似 Y-m-d H:i:s 格式的字符串 不区分大小写   3 使用正则替换内容    效果 实现 //返回时间对象 const getDate = (time) =\u0026gt; { let date = new Date(time); let year = date.getFullYear(); let month = fix0(date.getMonth() + 1); let day = fix0(date.getDate()); let h = fix0(date.getHours()); let minutes = fix0(date.getMinutes()); let seconds = fix0(date.getSeconds()); return { year, month, day, h, minutes, seconds, }; }; /** * 时间格式化 * @param {*} time 10位时间戳 * @param {*} str 制定到时间格式 y-m-d H:i:s 不区分大小写 */ const timeformat = (time, str = \u0026quot;y-m-d H:i:S\u0026quot;) =\u0026gt; { let obj = getDate(time * 1); if (!obj) { return null; } let result = str .replace(/([yY])/, `${obj.year}`) .replace(/([mM])/, `${obj.month}`) .replace(/([dD])/, `${obj.day}`) .replace(/([hH])/, `${obj.h}`) .replace(/([iI])/, `${obj.minutes}`) .replace(/([sS])/, `${obj.seconds}`); return result; }; // 十以内数字补零 const fix0 = (num) =\u0026gt; { return num \u0026lt; 10 ? String(\u0026quot;0\u0026quot; + num) : String(num); };  ","id":17,"section":"posts","summary":"场景 Api 直接返回数据库表的 curd 小伙伴 思路 序号 简介 1 new 一个时间对象 返回 年月日 时分秒（按需补 0 2 传入一个类似 Y-m-d H:i:s 格式的字符串 不区分大小写 3 使用正则替","tags":null,"title":"javascript时间戳转指定格式 ⌚️","uri":"https://blog.abadboy.cn/2019/08/javascript%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8C%87%E5%AE%9A%E6%A0%BC%E5%BC%8F/","year":"2019"},{"content":"场景 \u0026gt; 使用千分位格式化金额，更正式的显示  效果 思路  1.分割整数位和小数位，处理小数位补零，或者四舍五入 2.获取整数位的长度 按3分割 插入 , 号 3.拼接字符串 组合返回值  实现 /** * 金额类数字格式化 千分位 小数点 * @param {*} num 传入的数字 * @param {*} f 保留的小数位数 */ const moneyFormat = (num, f) =\u0026gt; { num = String(num); //转化为字符串 let Old_f = null; if (num.search(/\\./) \u0026gt; -1) { Old_f = num.toString().split(\u0026quot;.\u0026quot;)[1].length; //原始小数的位数 } if (Old_f \u0026amp;\u0026amp; Old_f !== \u0026quot;null\u0026quot; \u0026amp;\u0026amp; Old_f \u0026lt; f) { //如果比目标位数小则补 “0” for (let i = 0; i \u0026lt; f - Old_f; i++) { num += \u0026quot;0\u0026quot;; } } num = Math.floor(Number(num).toFixed(f) * Math.pow(10, f)) + \u0026quot;\u0026quot;; //tofixxed到值定位数后 转换成整数 let integer = num.slice(0, num.length - f) + \u0026quot;\u0026quot;; //取转换后到字符串整数部分 let decimal = num.slice(num.length - f, num.length) + \u0026quot;\u0026quot;; //小数部分 let thou = Math.floor(integer.length / 3); //thousandCentimeter 取千分位到个数 if (integer.length % 3 == 0) { thou = thou - 1; //如果完美整除则少一次循环 } let new_integer = \u0026quot;\u0026quot;; //新的整数位 let temp = 0; //临时坐标 for (let i = 0; i \u0026lt; thou + 1; i++) { let target = integer.length - (thou - i) * 3; //thou-1 按照 54321 这样做循环 获取分号的坐标 new_integer += integer.slice(temp, target); //拼接字符串 if (i !== thou) { new_integer += \u0026quot;,\u0026quot;; //过滤最后一个 } temp = target; } integer = new_integer; return { full: integer + \u0026quot;.\u0026quot; + decimal, //自动拼接字符串 arr: [integer, decimal], //分别返回 整数部分 和 小数部分 用于自定义样式 }; };  ","id":18,"section":"posts","summary":"场景 \u0026gt; 使用千分位格式化金额，更正式的显示 效果 思路 1.分割整数位和小数位，处理小数位补零，或者四舍五入 2.获取整数位的长度 按3分割 插入 , 号 3.","tags":null,"title":"常用javascript方法整理之数字千分位格式化","uri":"https://blog.abadboy.cn/2019/08/%E5%B8%B8%E7%94%A8javascript%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86%E4%B9%8B%E6%95%B0%E5%AD%97%E5%8D%83%E5%88%86%E4%BD%8D%E6%A0%BC%E5%BC%8F%E5%8C%96/","year":"2019"},{"content":"自动部署测试Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick Start Create a new post $ hexo new \u0026quot;My New Post\u0026quot;  More info: Writing\nRun server $ hexo server  More info: Server\nGenerate static files $ hexo generate  More info: Generating\nDeploy to remote sites $ hexo deploy  More info: Deployment\n","id":19,"section":"posts","summary":"自动部署测试Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post $ hexo new \u0026quot;My New Post\u0026quot; More info: Writing Run server $ hexo server More info:","tags":null,"title":"测试文章-自动部署测试","uri":"https://blog.abadboy.cn/1997/01/hello-world/","year":"1997"}],"tags":[{"title":"express","uri":"https://blog.abadboy.cn/tags/express/"},{"title":"javascript","uri":"https://blog.abadboy.cn/tags/javascript/"}]}